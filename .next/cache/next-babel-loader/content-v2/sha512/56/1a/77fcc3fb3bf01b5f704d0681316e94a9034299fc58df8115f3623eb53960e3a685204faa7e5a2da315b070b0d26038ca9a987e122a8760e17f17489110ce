{"ast":null,"code":"import * as React from 'react';\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = value => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;","map":{"version":3,"sources":["/Users/saidfatah/Documents/learning/NEXT/gqlcms-marketplace/hooks/use-local-storage.js"],"names":["React","useLocalStorage","key","initialValue","storedValue","setStoredValue","useState","item","window","localStorage","getItem","JSON","parse","error","setValue","value","valueToStore","Function","setItem","stringify","console","log"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4C;AAC1C,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCL,KAAK,CAACM,QAAN,CAAe,MAAM;AACzD,QAAI;AACF,YAAMC,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,GAA5B,CAAb;AAEA,aAAOK,IAAI,GAAGI,IAAI,CAACC,KAAL,CAAWL,IAAX,CAAH,GAAsBJ,YAAjC;AACD,KAJD,CAIE,OAAOU,KAAP,EAAc;AACd,aAAOV,YAAP;AACD;AACF,GARqC,CAAtC;;AAUA,QAAMW,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAI;AACF,YAAMC,YAAY,GAChBD,KAAK,YAAYE,QAAjB,GAA4BF,KAAK,CAACX,WAAD,CAAjC,GAAiDW,KADnD;AAGAV,MAAAA,cAAc,CAACW,YAAD,CAAd;AAEAR,MAAAA,MAAM,CAACC,YAAP,CAAoBS,OAApB,CAA4BhB,GAA5B,EAAiCS,IAAI,CAACQ,SAAL,CAAeH,YAAf,CAAjC;AACD,KAPD,CAOE,OAAOH,KAAP,EAAc;AACdO,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD;AACF,GAXD;;AAaA,SAAO,CAACT,WAAD,EAAcU,QAAd,CAAP;AACD;;AAED,eAAeb,eAAf","sourcesContent":["import * as React from 'react'\n\nfunction useLocalStorage(key, initialValue) {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const item = window.localStorage.getItem(key)\n\n      return item ? JSON.parse(item) : initialValue\n    } catch (error) {\n      return initialValue\n    }\n  })\n\n  const setValue = (value) => {\n    try {\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value\n\n      setStoredValue(valueToStore)\n\n      window.localStorage.setItem(key, JSON.stringify(valueToStore))\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return [storedValue, setValue]\n}\n\nexport default useLocalStorage\n"]},"metadata":{},"sourceType":"module"}